version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.2.0

jobs:
  lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: create virtualenv
          command: |
            make setup
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.devops
            source ~/.devops/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run install
          command: |
            source ~/.devops/bin/activate
            make install
      - run:
          name: run tests
          command: |
            source ~/.devops/bin/activate
            make test
      - run:
          name: run lint
          command: |
            source ~/.devops/bin/activate
            make lint
  build:
    docker:
      - image: cimg/python:3.11.4
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: "CapstoneEKS-HR7B6vHDFsOT"
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - kubernetes/install-kubectl
      - run:
          name: Configure variable
          command: |
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .env
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .env
            echo DOCKER_HUB_PASSWORD=$DOCKER_PASSWORD >> .env
            echo DOCKER_HUB_USERNAME=$DOCKER_USERNAME >> .env
            cat .env
      - run:
          name: Docker login
          command: |
            docker login -u "$DOCKER_USERNAME" -p $(echo "$DOCKER_PASSWORD")
      - run:
          name: Build image from Dockerfile
          command: docker build --tag=capstone .
      - run:
          name: Tag docker to Push image to github
          command: |
            docker tag capstone theblackdang/capstone
      - run:
          name: Push Docker Image
          command: |
            docker push theblackdang/capstone  
  deploy:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install kubectl 
          command: |
            curl -k -LO "https://dl.k8s.io/release/v1.24.7/bin/linux/amd64/kubectl"
            curl -k -LO "https://dl.k8s.io/v1.24.7/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
#            chmod +x /usr/local/bin/kubectl
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-east-1 
            aws eks update-kubeconfig --name CapstoneEKS-rUxu8XMd7aJG
            kubectl cluster-info
            kubectl get all -n kube-system
      - run:
          name: Deployment configmap to eks 
          command: |
            kubectl apply -f ./kubernetes/aws-auth-cfm.yaml
      - run:
          name: Deploytment app to eks 
          command: |
            kubectl apply -f ./kubernetes/deployment.yaml
      - run:
          name: Test cluster
          command: |
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get services
      - run:
          name: Cleaning up
          command: docker system prune

workflows:
  version: 2
  build-deploy:
    jobs:
      - lint
      - build:
          cluster-name: CapstoneEKS-HR7B6vHDFsOT
          aws-region: $AWS_DEFAULT_REGION
          filters:
            branches:
              only:
                - main
          requires:
            - "lint"
      - deploy:
          requires: [build]
          filters:
            branches:
              only:
                - main