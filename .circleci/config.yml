version: 2

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-kubectl:
    description: Install Kubectl
    steps:
      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            export PATH=$PATH:/usr/local/bin/kubectl

jobs:
  lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: create virtualenv
          command: |
            make setup
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.devops
            source ~/.devops/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run install
          command: |
            source ~/.devops/bin/activate
            make install
      - run:
          name: run tests
          command: |
            source ~/.devops/bin/activate
            make test
      - run:
          name: run lint
          command: |
            source ~/.devops/bin/activate
            make lint
  upload-docker:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Docker login
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: Build image from Dockerfile
          command: docker build --tag=capstone .
      - run:
          name: Tag docker to Push image to github
          command: |
            docker tag capstone theblackdang/capstone
      - run:
          name: Push Docker Image
          command: |
            docker push theblackdang/capstone   
  deploy-infras:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=capstone-project \
              --stack-name "capstone-eks-network-19-9-2023" \
              --region us-east-1 \
              --parameter-overrides file://cloudformation/network-parameters.json
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=capstone-project \
              --stack-name "capstone-eks-cluster-19-9-2023" \
              --region us-east-1 \
              --parameter-overrides file://cloudformation/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=capstone-project \
              --stack-name "capstone-eks-nodegroup-19-9-2023" \
              --region us-east-1 \
              --parameter-overrides file://cloudformation/nodegroup-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=capstone-project \
              --stack-name "capstone-eks-management-19-9-2023" \
              --region us-east-1 \
              --parameter-overrides file://cloudformation/management-parameters.json \
              --output text >> ~/project/ansible/checkIfDeployed.txt
            cat ~/project/ansible/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/project/ansible/inventory.txt
            aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=capstone-management*" \
              --output text >> ~/project/ansible/inventory.txt
            cat ~/project/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
            - project/ansible/checkIfDeployed.txts
      # - run:
      #     name: Destroy environments
      #     when: on_fail
      #     command: |
      #         python3 ~/project/clean-stacks.py
  configure-infras:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            export PATH=$PATH:/usr/local/bin/kubectl
      - add_ssh_keys:
          fingerprints: [dc:31:72:ac:30:aa:d2:cb:d3:27:1f:a1:f2:1d:4d:54]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo [management] > ~/project/ansible/inventory.txt
            aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=capstone-management*" \
              --output text >> ~/project/ansible/inventory.txt
            cat ~/project/ansible/inventory.txt
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/configure-server.yml
      # - run:
      #     name: Destroy environments
      #     when: on_fail
      #     command: |
      #         python3 ~/project/clean-stacks.py

  configure-cluster:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            export PATH=$PATH:/usr/local/bin/kubectl
      - add_ssh_keys:
          fingerprints: [dc:31:72:ac:30:aa:d2:cb:d3:27:1f:a1:f2:1d:4d:54]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/configure-cluster.yml
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            cat ~/project/ansible/inventory.txt
            echo "Wait 60 seconds..."
            sleep 60
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/save-elb-dns.yml
            cat ~/project/ansible/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/elb_dns.txt
      # - run:
      #     name: Destroy environments
      #     when: on_fail
      #     command: |
      #         python3 ~/project/clean-stacks.py

  deploy-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - add_ssh_keys:
          fingerprints: [dc:31:72:ac:30:aa:d2:cb:d3:27:1f:a1:f2:1d:4d:54]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/deploy-app.yml
          no_output_timeout: 2m
workflows:
  version: 2
  default:
    jobs:
      - lint:
          filters:
            branches:
              only: 
                - main
      - upload-docker:
          requires: [lint]
          filters:
            branches:
              only: 
                - main
      - deploy-infras:
          requires: [upload-docker]
          filters:
            branches:
              only:
                - main
      - configure-infras:
          requires:
            - deploy-infras
      - configure-cluster:
          requires:
            - configure-infras
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster